A:  Yeah , I think I got my mike on . 
C:  <breath> 
E:  <breath> 
C:  <breath> 
A:  OK . 
C:  <mike noise> 
C:  <breath> 
A:  Let 's see . 
B:  OK . So , we all switched on ? 
A:  <breath-laugh> We are all switched on , yeah . <laugh> 
E:  <breath-laugh> 


A:  three eight eight , seven one , four six two seven  
E:  <breath> 
C:  <breath> 
A:  six nine two , six four O , nine seven nine  
E:  <breath> 
A:  two one , one six , zero two , three zero , nine six  
A:  eight six one , six four , eight nine three six  
C:  <breath> 
C:  <breath> 
A:  four O eight , five six nine , eight eight zero  
C:  <breath> 
A:  zero seven , four two , eight two , four four , nine one  
E:  <breath> 
E:  <sniff> 
A:  five , four one five , seven seven , one one nine , seven  
A:  four eight seven , nine three , four two four zero .  
B:  OK . Ami , do yours then we 'll open it and I think it 'll be enough . 
A:  Mmm  Doesn't , uh  It should be the other way . Yeah , now it 's on . 
F:  Right . OK . 
F:  One five six , seven four one , five six four  
F:  zero five one , four five three , nine two zero five  
C:  <breath> 
C:  <mike noise> 
F:  one three three eight , zero , two five zero  
E:  <breath-laugh> 
F:  eight zero three six , nine , two eight nine  
F:  six seven one , one nine , eight one nine nine  
C:  <breath> 
F:  eight , five zero eight , nine eight , four five five , eight  
E:  <breath> 
E:  <clears throat> <sniff> 
F:  three zero seven , seven eight four , eight one seven  
E:  <breath> 
F:  zero eight three nine , eight , three eight three .  


B:  Alright . Anyway . So , uh , before we get started with the , uh , technical part , I just want to review what I think is happening with the  
F:  We are all switched on . 
C:  <breath-laugh> 
C:  <breath> 
D:  <mike noise> 
B:  our data collection . <mouth> So  
B:  <mouth> Uh , probably after today , <breath> 
B:  that shouldn't come up in this meeting . Th - this  this is s should be im it isn't  There 's another thing going on of gathering data , <breath> 
F:  <breath> 
C:  <mike noise> 
B:  and that 's pretty much independent of this . <breath> 
F:  <breath> 
B:  But , uh , I just want to make sure we 're all together on this . <breath> 
B:  What we think is gonna happen is that , 
B:  uh , in parallel starting about now <breath> we 're gonna get Fey <mouth> 
B:  to , 
B:  where you 're working with me and Robert , draft a note that we 're gonna send out to various CogSci c and other classes saying , " here 's an opportunity to be a subject . <breath> 
E:  <sniff> 
B:  Contact Fey . " <breath> 
B:  And then there 'll be a certain number of um , hours during the week which she will be available and we 'll bring in 
E:  <sniff> 
B:  people . Uh , roughly how many , Robert ? 
B:  We d Do we know ? 
C:  <mouth> Um , fifty was our  sort of our first  
B:  OK . So , we 're looking for a total of fifty people , <breath> not necessarily by any means all students but we 'll s we 'll start with  with that . 
B:  <breath> In parallel with that , we 're gonna need to actually do the script . 
E:  <sniff> 
B:  <mouth> 
B:  And , so , I guess there 's a plan to have a meeting Friday afternoon 
B:  Uh , with  uh , Jane , and maybe Liz and whoever , on actually getting the script worked out . 
D:  <mike noise> 
E:  <sniff> 
B:  But what I 'd like to do , if it 's O K , <breath> 
B:  is to s 
B:  to , as I say , start the recruiting in parallel and possibly start running subjects next week . 
B:  The week after that 's Spring Break , and maybe we 'll look for them  some subjects next door or  i 
C:  Yeah . 
C:  Yeah . Also , Fey will not be here during spring break . So . 
B:  Oh , OK , then we won't do it . OK . So that 's easy . 
B:  <inbreath> Um . 
C:  <mike noise>  
B:  So , is  Is that 
B:  make sense to everybody ? 
C:  Yeah . Also , um , F <breath> both Fey and I will , um , <breath> 
C:  do something of which I may , eh  
C:  kindly ask you to  to do the same thing , which is we gonna check out our social infrastructures for possible subjects . Meaning , <breath> 
C:  um , kid children 's gymnastic classes , pre - school parents and so forth . <breath> 
C:  They also sometimes have flexible schedules . <breath> 
C:  So , if you happen to be sort of in a non - student social setting , and you know people who may be interested in being subjects   
C:  We also considered using the Berkeley High School and their teachers , maybe , <breath> 
C:  and get them interested in 
B:  That 's a good idea . 
C:  stuff . <breath> 
C:  And , um . <breath> 
C:  So that 's as far as our brainstorming was concerned . 
B:  Oh , yeah . The high school 's a great idea . 
E:  <swallowing> 
C:  <inbreath>  
C:  Yeah . 
C:  Yeah . 
C:  OK . 
C:  So much for the data , <breath> 
C:  except that with Munich everything is fine now . 
C:  They 're gonna <breath> transcribe . They 're also gonna translate the , uh , German data from the 
C:  TV and cinema stuff for Andreas . So . 
C:  They 're  they all seem to be happy now , <breath> 
C:  with that . <breath> 
C:  <mouth> 


C:  So . 
C:  <breath> But I  I will just make a first draft of the , uh , note , the " write - up " note , send it to you and Fey and then  
B:  <mouth> And why don't you also copy Jane on it ? 
C:  And , um , 
C:  Are we  Have we concurred that , uh , these  these forms are sufficient for us , and necessary ? <breath> 
B:  Uh , th I think they 're necessary . 
B:  <inbreath> This  The permission form . 
C:  Mmm . Nuh . 
B:  Uh , there has to be one , and I think we 're just gonna use it as it is , and  
C:  N . 
B:  Um  
B:  <breath> 
C:  You happy with that ? 
B:  Well , yeah . There 's one tricky part 
B:  about , 
B:  um , they have the right  
B:  um   
B:  I The last paragraph  " if you agree to participate you have the opportunity to have anything excised which you would prefer not to have included in the data set . " 
B:  OK ? <breath> Now that , we had to be included for this 
B:  other one which might have , uh , meetings , you know , about something . In this case , it doesn't really make sense . 
C:  Mm - hmm . 
B:  Um , so what I 'd like to do 
B:  is also have our subjects sign a waiver 
B:  saying " I don't want to see the final transcript " . 
C:  Mm - hmm . 
B:  And if they don't  If they say " no , I 'm not willing to sign that " , then we 'll show them the final transcript . But , um . 
C:  Yep . Makes sense . 
B:  <mouth> 
B:  That , uh  
B:  yeah , so we might actually , um  
B:  S i Jane may say that , " you know , you can't do this " , uh , 
B:  " on the same form , we need a separate form . " But anyway . I 'd  I 'd  I 'd like to , 
B:  e e um , add an a little thi eh  a thing for them to initial , saying " nah , do I don't want to see the final transcript . " But other than that , that 's one 's been approved , 
C:  Mm - hmm . 
B:  this really is the same project , 
B:  uh , rec you know . And so forth . So I think we just go with it . 


C:  So . <breath> w c sh should we move on to the technical sides ? <breath> 
B:  Yep . 
C:  Well I guess the good  good news of last week was the parser . 
E:  <sniff> 
C:  So , um  <breath> 
C:  Bhaskara and I started working on the  <breath> 
C:  the parser . Then Bhaskara went to class and once he came back , um , <breath> 
C:  it was finished . <breath> 
E:  <laugh> <breath> 
D:  <laugh-breath> 
C:  So . <laugh> 
C:  It , uh  I didn't measure it , but it was about an hour and ten minutes . 
D:  Yep . Something like that . 
C:  And , um  and now it 's  We have a complete English parser that does everything the German parser does . 
E:  <cough in background> 
B:  Which is <laugh> not a lot . But   
D:  That 's the , uh , point . <laugh> 
C:  <laugh> 
A:  <breath> 
F:  <breath-laugh> 
C:  The  uh , that 's not a lot . <breath> 
B:  <breath> OK . 
D:  Yes . 
B:  Right . <inbreath> 
E:  <inbreath> 
C:  And um . <breath> 
E:  What did you end up having to do ? I mean , wha Was there anything  
C:  Well , if you , eh  
D:  We 'll show you . 
E:  interesting about it at all ? or are we gonna see that ? 
B:  Yeah , we can show us , right ? 
C:  Well , w w 
C:  We d The first we did is we  we tried to  to do  change the  the " laufen " into " run " , <breath> or " running " , <breath> or " runs " . <breath> 
B:  Yep . 
E:  Mm - hmm . 
C:  And we noticed that whatever we tried to do , it no effect . <breath> 
C:  And we were puzzled . <breath> 
E:  OK . 
E:  Mm - hmm . 
C:  And , uh , the reason was that the parser i c 
C:  completely ignores the verb . <breath> 
E:  Hmm . <laugh> Interesting parser property .  
C:  So this sentence  
D:  <laugh-breath> 
A:  <breath> 
C:  sentence is  
E:  <laugh> 
C:  parses the p the same output , <breath> 
E:  <inbreath> 
D:  <mike noise> 
C:  um , even if you leave out , um , 
E:  I see . Yeah .  
C:  all  all of this . So it 's basically feature film and TV . 
E:  Today  OK . And the  t and the time , right ? 
C:  That 's what you need . <breath> 
C:  If  if you 'd add  add Today and Evening , it 'll add Time or not . So it  i it does look at that . But all the rest is p simply frosting on the cake , <breath> 
E:  OK . 
C:  and it 's optional for that parser . 
E:  True . 
C:  <breath> And  
D:  One thing I was wondering was , 
D:  <breath> 
D:  those percentage signs , right ? <breath> 
D:  So , I mean , 
C:  <inbreath> 
D:  why do we even have them ? Because  if you didn't have them   <breath> 
C:  Yep . 
C:  <laugh-cough> Uh , I 'll tell you why . Because it gives a  you a score . 
E:  Mm - hmm . 
D:  Oh . 
C:  And the value of the score is , v I assume , 
C:  I guess , the more of these optional things that are actually in there , the higher the r score <breath> 
D:  OK . 
F:  Right . 
E:  It 's a match . 
D:  So that 's the main purpose . Alright . 
C:  it is . 
E:  Mm - hmm . 
B:  OK . 
D:  <laugh-breath> 
C:  So we  we shouldn't belittle it too much . It 's doing something , 
D:  <mike noise> 
E:  <sniff> 
C:  some things , 
D:  <inbreath>  
C:  and it 's very flexible . 
F:  <inbreath>  <outbreath> 
C:  I 've just tried to 
E:  Mm - hmm . <laugh> 
E:  <breath> 
F:  Right . <inbreath>  <outbreath> 
C:  be nice . 
B:  <mouth> <inbreath> No , no . Fine . Yeah , yeah , yeah , flexible it is . 
C:  <laugh-breath> 
E:  Right  Yeah . <laugh> 
F:  But  <inbreath> 
C:  <clears throat> 
C:  <cough> 
C:  OK . <breath> 
D:  <click> 
C:  Um , let 's hope that the generation will not be more difficult , even though the generator is a little bit more complex . 
C:  Uh but we 'll  
C:  Mmm , 
C:  that means we may need two hours and twenty minutes rather than an hour ten minutes , <breath> 
B:  <breath> Alright . 
D:  <breath-laugh> 
D:  Right . 
C:  I hope . 
C:  And the next thing I would like to be able to do , and it seems like this would not be too difficult either , is <breath> 
C:  to say , " OK let 's now pretend we actually wanted to not only change the  <breath> 
C:  the mapping of  of , uh , words to the M - three - L but we also wanted to change  add a new sentence type and and make up some  some new M - three - L  s " 
B:  <mouth> Yep . 
B:  So - 
B:  <mouth> 
B:  That 'd be great . It would be a good exercise to just see <breath> 
C:  See th <breath> 
B:  whether one can get that to run . 
C:  Mm - hmm . <breath> 
C:  Yep . 
C:  And , um , <breath> 
D:  So , that 's  Fine , yeah .  
C:  that 's  shouldn't be too tough . 
B:  So , yeah . I definitely think it 's  <breath> 
E:  <breath> 
B:  It 's worth 
B:  the exercise of trying to 
B:  actually add something 
B:  that isn't there . 
C:  Hmm ? 
B:  Uh  
E:  <breath> 
C:  Sort of get a complete understanding of the whole thing . <breath> 
B:  Disc - 
B:  Then the next thing we talked about is actually , <breath> 
B:  Yeah , a kid understanding what 's going on . <breath> 
B:  Then the next thing we talked about is actually , <breath> 
B:  um , figuring out how to add our own 
B:  tags , and stuff like that . 
C:  OK . 


B:  So , you can sho You  you  Are  are you gonna show us the little templates ? <breath> 
E:  <inbreath> 
C:  <breath> 
E:  S 
C:  Yeah . We ar we can sh er  I can show you the templates . <breath> 
E:  " The former end g "  Oh , I see . Uh - huh . 
C:  I  I also have it running here , so if I <breath> 
C:  do this now , 
C:  um , <breath> you can see that 
C:  it parsed the wonderful English sentence , " Which films are on the cinema today  evening ? "  
B:  <laugh> Well , that sounds  <laugh> 
E:  <laugh> <breath> 
C:  But , um . <laugh> 
C:  Uh do don't worry about it . It could be 
B:  No i <laugh> 
C:  " this evening , which  which films are on the cinema " , or " running in the cinema , which  " 
D:  <laugh-breath> 
E:  OK . 
C:  uh , " today evening " , uh i 
C:  " Is anything happening in the cinema this evening ? " 
E:  OK . Key words , e basically . 
C:  <breath> 
B:  Well  
C:  Ge - elaborate , or , more or less , <breath> uh  <breath> 
B:  <mike noise> 
B:  Actually , it 's a little tricky , 
B:  in that there 's some 
B:  allowable German orders which aren't allowable English orders and so forth . And it is order - based . So it  it  
D:  <mike noise> 
B:  Isn't it ? 
D:  No . 
C:  No . 
B:  Oh . So it  it doe I it  These  
C:  It is not  <breath> 
B:  u these optional elements , it 's  it 's actually a set , not a sequence ? 
C:  Yeah . We were  I was afraid that , um  <breath> 
D:  <mike noise> 
B:  Oh ! <laugh> 
E:  So it really is key word matching , basically . <breath> 
B:  Really a se 
C:  <breath> Um . <breath> 
F:  e yeah . Mm - hmm . 
B:  Oh , wow . 
C:  Um , I mean , these sentences are just silly . I mean , uh , d these were not the ones we  we actually did it . <breath> 
E:  Hmm . 
C:  Um . What 's an idiomatic of phrasing this ? Which films are  
D:  @ @  Are pl playing at the cinema ?  
C:  showing ? playing ? 
D:  Yeah . 
C:  <keyboard typing in background> 
E:  Tonight ? 
E:  <laugh> 
D:  I changed that file , actually , where it 's on my account . 
F:  Actually , you would say , " which films are on tonight ? " 
E:  This  this evening ? 
D:  You want to get it ? Or  is  di was it easy to get it ? 
C:  Um . I have no net here . 
D:  Oh , OK . 
B:  Do I ?  
A:  <mouth> 
B:  <mike noise> 
C:  OK . So . Wonderful parse , same thing . <breath> 
C:  Um . <breath> 
B:  Right . <breath-laugh> 
C:  <mouth> 
C:  Except that we d w we don't have this , uh , time information here now , which is , 
C:  um    
C:  Oh . This  are the reserve . 
C:  Anyways . <breath> 
C:  So . 
C:  <mike noise> 
C:  Um . 
C:  These are the  sort of the ten different sentence types 
D:  <mike noise> 
C:  that the uh  <breath> 
C:  the parser was able to do . And it still is , now in English . <breath> 
B:  Yeah .  
E:  Mm - hmm . 
C:  And , um  Sorry .  
C:  And , um 
C:  you have already to make it a little bit more elaborate , right ? 
D:  Yeah , I mean I changed those sentences to make it , uh , 
D:  more , uh , idiomatic . 
D:  And , of course , you can have i 
D:  many variations in those sentences , they will still parse fine . 
D:  So , in a sense it 's pretty broad . <laugh> 
C:  <breath-laugh> 
E:  <breath-laugh> 
B:  OK . 
C:  OK . 
C:  So , if you want to look at the templates , <breath> 
D:  <mike noise> 
C:  <clears throat> 
C:  they 're conveniently located in a file , " template " . 
C:  Um , <breath> 
C:  and this is what I had to do . I had to change , @ @  
C:  " Spielfilm " to " film " , uh , " Film " to " movie " , cinem " Kino " to " cinema "  
C:  to " today "  heu " heute " to " today " , evening  " Abend " to " evening " 
E:  Huh . 
E:  <laugh> 
B:  <laugh> 
D:  <inbreath>  
B:  Capitalized as well  
D:  <inbreath>  
A:  Hmm . 
C:  And , um . <breath> 
E:  <breath-laugh> 
B:  <inbreath> Y i  
D:  One thing I was wondering , was , 
D:  those functions there , are those things that modify the M - three - L basically ? 
F:  <breath> <breath> 
C:  Yep . 
D:  OK . 
C:  And that 's  that 's the next step , but we 'll get to that in a second . <breath> 
B:  <inbreath> p  
C:  And so this means , um , 
B:  <mouth> Oh . <outbreath> 
C:  " this " and " see " are not optional . 
C:  " Want I like " is all maybe in there , but may also not be in there . <breath> 
B:  So  so , the point is , if it says " this " and " see " , it also will work in " see " and " this " ? 
E:  S 
B:  In the other order ? 
C:  Yeah . 
B:  with those two key words ? 
C:  Should we try it ? 
B:  " This is the one I want to see " 
B:  or whatever . 
C:  OK . 
C:  " Action watch " , <inbreath> 
D:  Hmm . 
C:  whatever . Nothing was specialfi specified . <breath> 
C:  except that it has some references to audio - visual media here . <breath> 
D:  AV medium .  
D:  <mike noise> 
D:  Yeah . 
C:  Where it gets that from   It 's correct , but I don't know where it gets it from . 
D:  " See " . 
C:  Oh , " see " . Yeah . 
D:  I mean it 's sort of   
C:  Yeah . Yep . OK . <breath> 
C:  And " see this "  
C:  is exactly the same thing . <breath> 
D:  <mike noise> 
B:  OK , so it is set - based . Alright . 


D:  Yeah , so where are those  those functions " Action " , " Goodbye " , and so on , right ? Are they actually , um , <breath> 
D:  Are they going to be called ? Um , are they present in the code for the parser ? 
C:  Yeah . I think what it does , it i i it does something sort of fancy . It loads 
C:  um  <breath> 
C:  It has these style sheets and also the , um , 
C:  schemata . <breath> 
C:  So what it probably does , is it takes the , uh , 
C:  <mouth> 
C:  um   
C:  Is this where it is ? This is already the XML stuff ?  
C:  This is where it takes its own , um , syntax , 
C:  and converts it somehow . <breath> 
C:  Um . <breath> 
C:  <inbreath> 
E:  <breath> 
B:  <mouth> Alright . 


C:  Where is the uh  
C:  <tongue taps>  
D:  What are you looking for ? 
C:  <breath> 
C:  Um , where it actually produces the  the XML out of the , uh , parsed  stuff . 
D:  Oh , OK .  
C:  <tongue taps>  
C:  No , this is not it . <breath> 
C:  Uh . I can't find it now . <breath> 
C:  You mean , where the  where the act how the action " Goodbye " 
C:  maps into something  
D:  Yeah .  
A:  Yeah , where are those constructors defined ? 
D:  Oh . 
D:  No , that 's not it .  
C:  Nope . 
C:  Yeah . <breath> 
C:  This is sort of what happens . 
C:  This is what you would need to  to change  to get the , uh , XML changed . <breath> 
C:  So when it encounts encounters " Day " , <breath> 
D:  <mike noise> 
C:  it will , uh , <breath> 
C:  activate those h classes in the  in the XML stuff   
D:  <mike noise> 
C:  But , um  <breath> 
C:  I saw those actions  uh , the " Goodbye " stuff somewhere . 
C:  Hmm , hmm , hmm , hmm , hmm .  
A:  Grep for it ? 
C:  Yeah . 
C:  Let 's do that . 
C:  Oh . 
A:  <breath-laugh> 
D:  Mmm . 
D:  M - three - L dot DTD ? 
C:  Yep . 
D:  That 's just a  
D:  specification for the XML 
C:  Yep . 
D:  format . 
C:  Well , we 'll find that out . 


C:  So whatever  n this does  I mean this is , basically , looks l to me like a function call , right ? <breath> 
B:  Hmm ? Oh , yeah . 
C:  And , um  <breath> <mouth> 
C:  So , whenever it  it encounters " Goodbye " , 
C:  which we can make it do in a second , here  
A:  That function automatically generates an initialized 
A:  XML structure ? 
C:  <mouth> I <breath> 
D:  I think each of those functions act on the current XML structure , and 
D:  change it in some way , for example , by adding a  
B:  <inbreath> y 
D:  a l a field to it , or something . 
B:  Yeah . They also seem to affect state , cause some of them  
C:  Mm - hmm . 
B:  there were other actions 
D:  Right . 
B:  uh , that  that s seemed to step  state variables somewhere , like the n s " Discourse Status Confirm " .  
C:  <cough> 
C:  Yep . <sniff> 
B:  OK . So that 's going to be a call on the discourse and <breath> confirm that it 's  
C:  <mouth> 
C:  W we Mm - hmm  
D:  Oh , you mean that 's not going to actually modify the tree , but it 's going to change the event . Oh . Oh . 
B:  I think that 's right . I think it 's actually  That looks like it 's state modification . 
C:  e  
C:  <sniff> e mmm  
C:  <breath> Um , well i 
C:  There is a feature called " Discourse - Status " , <breath> 
D:  When there 's a feature . 
B:  Yeah . 
C:  And so whenever I just say , " Write " , 
C:  it will  it will put this in here . <breath> 
B:  Oh , so it always just  Is it  So it  
B:  Well , go back , then , cuz it may be that all those th things , 
C:  h 
B:  while they look like function calls , are just 
B:  a way of adding exactly that to the XML . 
C:  Yep . 
B:  Uh - huh ! 
D:  <mike noise> 
C:  So , this  
B:  I 'm not  I 'm not sure . 
B:  e I 'm not sure  e that  
C:  Um  well , we  we 'll see , when we say , 
C:  let 's test something ,  
D:  <mike noise> 
C:  " Goodbye " , 
C:  causes it to c to create basically an " Action Goodbye - End - Action " . <breath> Which is a means of telling the system to shut down . 
B:  Right . 
B:  Right . 
C:  Now , if we know that " Write " 
C:  produces a " Feature Discourse - Status Confirm Discourse - Status " . 
C:  So if I now say " Write , 
C:  Goodbye , " 
C:  it should do that .  
C:  It sho it creates this , 
D:  Mm - hmm . 
C:  " Confirm Goodbye " . <breath> 
B:  Right . 
D:  Right there .  <breath> 
B:  Yep . 
D:  But there is some kind of function call , because how does it know to put Goodbye in Content , but , uh , Confirm in Features ? 
D:  So - 
C:  Oh . It d it  n That 's because  
D:  So , it 's not just that it 's adding that field . It 's  
B:  Right . 
B:  Absolutely . Good point . 
D:  OK . 
B:  It 's  it 's  the  It 's under what sub - type you 're doing it . Yeah . 
C:  Mm - hmm . Yeah . 
A:  It 's mystery functions . 
D:  <breath-laugh> 
E:  <mike noise> 
D:  Well , they 're defined somewhere , presumably . 
C:  Well , sometimes it m Sometimes , i 
A:  <laugh> 
E:  <breath-laugh> 
D:  <laugh> 
B:  Yeah , each is  S so that 's funny . You bury the s the state in the function  
C:  When it  <breath> 
E:  <mike noise> 
B:  Alright . Uh  @ @ 
C:  it  <breath> 
A:  Well , it just automatically initializes things that are common , right ? So it 's just a shorthand . 
D:  <mike noise> 
B:  Yeah . 
C:  For example  Oh , this is German . Sorry . 
C:  e 
D:  <laugh> 
C:  So , now , this , it cannot do anymore . Nothing comes out of here . 
A:  A " not a number " is a value . Awesome . <laugh> 
C:  <breath> <several coughs> <breath> 
D:  <laugh> 
E:  <breath> 
C:  So , it 
C:  doesn't speak German anymore , but it does speak English . <breath> And there is , here , 
C:  a reference  
C:  So , this tells us that whatever is  has the ID " zero " is referenced here  
D:  <mike noise> 
C:  by @ @  the restriction seed and this is exa " I want  " 
E:  <breath> 
C:  What was the sentence ? <breath> 
B:  " I want two seats here . " 
C:  " need two seats here . " Nuh . 
C:  " And where is it playing ? " There should also be a reference to something , maybe . 
C:  <mouth> 
C:  Our d This is re um  
A:  <mouth> <inbreath>  
C:  Mmm . <mouth> 
C:  Here , we change  and so , we  Here we add something to the Discourse - Status , that the user wants to change something that was sort of done before  <breath> 
B:  <sniff> 
E:  <breath> 
B:  <mike noise> 
E:  <breath> 
C:  And , uh  
E:  <breath> 
C:  and that , whatever is being changed has something to do with the cinema . 
E:  <breath> 
A:  So then , whatever takes this M - three - L is what actually changes the state , not the  
B:  <mouth> 
A:  Yeah , OK . 
E:  <breath> 
B:  No , right , the Discourse Maintainer , yeah . 
A:  Yeah . 
C:  <mike noise> 
E:  <breath> 
B:  I see . And it  and it runs around looking for Discourse Status 
B:  tags , 
B:  and doing whatever it does with them . 
B:  And other people ignore those tags . <breath> 


C:  Point number two . 
C:  I got the , uh , M - three - L for the routes today . 
C:  Uh , so I got some more . 
C:  This is sort of the uh , <breath> um , <breath> 
C:  <computer beep in background> 
C:  Hmm . Interesting . It 's just going up , it 's not going 
C:  back down . <breath> 
C:  So , this is  um , what I got today is <breath> the  the new <breath> um <breath> M - three - L for 
C:  um , <breath> <mouth> the Maps , <breath> 
B:  <mouth> Yep . 
C:  uh , and with some examples  So , this is the XML and this is sort of what it will look like later on , 
E:  <breath> 
C:  even though it  you can't see it on  on this resolution . <breath> 
C:  And this is what it  sort of is the  the structure of Map requests , 
C:  um  <breath> 
C:  also not very interesting , <breath> 
C:  So , e enough of that , 
C:  but I , uh , um , 
C:  mmm , 
C:  the e sort of , Johno and I will take up that 
C:  responsibility , 
B:  <mouth> <inbreath-outbreath>  
C:  and , um , get a first draft of that . <breath> 


C:  and here is the more interesting stuff for us , is the routes , 
C:  route elements , <breath> 
C:  and , again , as we thought it 's really simple . This is sort of the , uh , <breath> 
C:  <mouth> 
C:  um , <breath> parameters . We have 
C:  @ @  
C:  simple " from objects " and " to objects " and so forth , 
C:  points of interest along the way   
C:  And , um , 
C:  I asked them whether or not we could , um  
E:  <breath> 
C:  First of all , I was little bit  
E:  <breath> 
C:  It seemed to me that this m way of doing it is sort of a stack a step backwards from the way we 've done it before . t <breath> 
E:  <breath> 
C:  It seems to me that some notions were missing . 
C:  So these are  these are  
B:  <inbreath> S  
B:  So these are  these are your friends back at EML .  
A:  <breath> 
C:  Yep . Who are doing this . 
D:  <mike noise>  
B:  So this is not a complicated negotiation . 
B:  There 's  there 's not seven committees , or anything , right ? <breath> 
C:  No . <breath> 
C:  No , this is very straightforward . <breath> 
B:  Great . So this is just trying to  
B:  It 's a design thing , not a political thing . 
C:  Yeah . <breath> 
B:  Once we 've  eh  We can just sort of agree on what oughta be done . 
C:  <mouth> Exactly . <breath> And , um  
B:  Good . 
C:  And , uh   
C:  However , the , uh  
C:  e So that you understand , it is really simple . Uh  You  you have a route , and you cut it up in different pieces . 
D:  <mike noise> 
C:  And every  
C:  every element of that e r r f of that  
D:  <yawn> 
C:  Every segment we call a " route element " . 
C:  And so , from A to B we cut up in three different steps , 
C:  and every step has a " from object " where you start , a " to object " where y where  you sort of end , and some points of interest along the way . 
E:  <breath> 
C:  What w I was sort of missing here , and uh , maybe it was just me being too stupid , is , <breath> I didn't sort of get the  the notion of the global goal 
C:  of the whole route . Really , s was not straightforward visibly for me . <breath> 


C:  And some other stuff . And I <breath> 
C:  suggested that they should n be  k uh , kind enough to do s two things for us , is one , um , <breath> 
C:  <mouth> Also allocating , uh , some tags for our Action Schema Enter - Vista - Approach , <breath> 
E:  <breath> 
E:  <mike noise> 
C:  and  
C:  <mike noise> <cough> <breath> 
E:  <cough in background> 
C:  And also , 
C:  um , since you had suggested that  
C:  that , um , we figure out if we ever , for a demo reason , wanted to shortcut directly to the g GIS and the Planner , <breath> 
C:  of how we can do it . 
C:  Now , what 's the state of the art of getting to entrances , um , what 's the syntax for that , how get getting to <breath> vista points and calculating those on the spot . <breath> 
D:  <mike noise> 
C:  And the Approach mode , anyhow , is the default . 
E:  <breath> 
C:  That 's all they do it these days . Wherever you 'll find a route planner it n does nothing but get to the closest point where the street network is <breath> 
B:  Mm - hmm . 
E:  <mike noise> 
C:  at minimal distance to the geometric center . <breath> 
C:  @ @ 
E:  <breath> 
C:  So . 


B:  <breath> So , well , let  Now , this is important . Let , uh  I want a a Again , outside of m almost managerial point , <breath> 
B:  um  
B:  <mouth> 
B:  You 're in the midst of this , so you know better . But it seems to me it 's probably 
B:  a good idea to 
B:  li uh  minimize the number of 
B:  uh , change requests we make of them . 
B:  <breath> So it seemed to me , what we ought to do is get our story together . 
B:  OK ? And think about it some , internally , before 
C:  <mike noise> 
B:  asking them to make changes . 
C:  Mm - hmm . 
B:  Oh . Does this  does this make sense to you guys ? It  I mean you 're  you 're doing the  the interaction but it seemed to me that <breath> 
B:  what we ought to do is come up with a  
D:  <mike noise> 
B:  uh , something where you , um   
B:  And I  I don't know who 's mok working most closely on it . Probably Johno . 
E:  <mike noise> 
B:  OK . <breath> 
B:  Uh , take what they have , 
B:  send it to everybody saying " this is what they have , this is what we think we should add " , 
B:  OK ?  and then have a d a  an iteration within our group saying " Hmm , well  " 
B:  OK ? And get our best idea of what we should add . 
C:  Mm - hmm . 
B:  And then go back to them . 
B:  Is i or , I don't know does this make sense to you ? Or  
C:  Yeah . <breath> Especially if we want  <breath> 
C:  Sort of , what I  my feeling was eh we  we sort of reserved something that has a r eh 
C:  an OK label . That 's  th that was my th first sort of step . <breath> 
B:  Mm - hmm . 
C:  I w 
C:  No matter how we want to call it , <breath> 
C:  this is sort of our playground . And if we get something in there that is a structure elaborate and  and  and  and  and complex enough to  to  to maybe enable a whole simulation , 
B:  Right . 
B:  Right . 
C:  one of these days , 
C:  that would be  u the  the perfect goal . <breath> 
B:  <breath> That 's right . So . So , Yeah . The problem isn't the short ra range optimization . 
B:  It 's the sort of  o one or two year kind of thing . OK . What are the thl class of things we think we might try to do in a year or two ? <breath> 
B:  How  how would we try to characterize those and what do we want to request now <breath> 
B:  that 's leave enough space to do all that stuff ? 
C:  Mm - hmm . Yep . 
B:  Right . And that re that requires some thought . 
C:  Yep . 
B:  And  so that sounds like a great thing to do <breath> 
B:  as the priority item 
B:  um , as soon as we can do it . 
C:  Yep . 
B:  So y so you guys will <breath> send to the rest of us 
B:  um  
B:  <mouth> a version of 
D:  <papers rustling in background> 
E:  <papers rustling in background> 
B:  um , this , 
A:  <breath> 
B:  and  the  uh , description  
A:  With sugge yeah , suggested improvements and    
B:  Well b Yeah . So , the  the  uh  Not everyone 
B:  uh , reads German , so if you 'd 
B:  um <mouth> 
A:  Mmm . 
B:  tu uh , tur change the description to , uh , 
A:  <breath-laugh> 
B:  English 
A:  OK . 
B:  and , um , 
D:  <clank of drinking glass in background> 
B:  Then  then , yeah . Then , with some sug s suggestions about where  where do we go from here ? 
A:  <laugh> 
B:  Uh , this  and this , of course , was just the <breath> 
A:  OK . 
B:  <mouth> action end . Uh , at some point we 're going to have to worry about the language end . But for the moment just <breath> 
C:  <mouth> 
B:  uh , t for this class of  of things , we might want to try to encompass . 
B:  And   <breath> 
A:  Then the scope of this is beyond  
A:  Approach and Vis - or Vista . Yeah , yeah . 
B:  Oh , yeah , yeah yeah yeah . This is  this is everything that  that , 
B:  um ,  <breath> 
B:  you know , um  
A:  Yeah , yeah . 
B:  we might want to do in the next couple years . 
A:  So what would  OK . 
C:  Hmm ? 
D:  <mike noise> 
C:  <fabric whishing against mike> 
B:  We don't  I mean , that 's an issue . We don't know what , entirely . 
C:  <computer beeping in background> 
B:  And , um  
C:  <mouth> <breath> 
C:  <breath> <mike noise> 
B:  <inbreath> And , again , it 's just a question of which of these things , 
B:  uh , people want to <breath> 
B:  dive into . What , 
B:  Well , I don't know . I mean , maybe  maybe that 's what we 'll do is  is s u e 
B:  We can do anything we want with it . I mean , once we have fulfilled these requirements , 
E:  Yep . Mmm  Mm - hmm . 
E:  <breath> Mm - hmm . <breath> 
B:  OK , and the one for next 
B:  uh , summer is just 
E:  <breath> 
B:  half done and then the other half is this , 
E:  <breath> Mm - hmm . 
B:  um , 
B:  " generation thing " which we think isn't much different . 
B:  So once that 's done , 
B:  then all the rest of it is , 
B:  uh , sort of , 
D:  <mike noise> 
B:  you know , what we want to do for the research . 
B:  And we can  w we can do all sorts of things that don't fit into their 
B:  framework at all . 
F:  <inbreath>  <outbreath> 
B:  Th - there 's no reason why we 're c we 're constrained to do that . 
E:  Mm - hmm . 
B:  If we can use all the , uh , 
B:  execution engines , 
D:  <mike noise> 
B:  then we can , 
B:  <mouth> 
B:  you know , really 
E:  <breath> 
B:  <mike noise> 
B:  try things that 
E:  Mm - hmm . 
B:  would be too  too much pain to do ourselves . But there 's no obligation on any of this . <breath> 
F:  <inbreath> 
B:  <inbreath> 
B:  Anyway . S 
D:  <mike noise> 
B:  Who 's going ? 
B:  <mouth> OK . And that  But as I say , this is  
B:  all along was viewed as a kind of  
B:  <mouth> 
B:  a m a minor thing , 
B:  necessary , but  but not  
F:  Right . Right . That 's great ! 
B:  OK ? 
B:  And much more interesting is the fact that , 
B:  <mouth> as part of doing this , we  we are , 
B:  you know , inheriting this system that does all sort of these other 
F:  Right . 
B:  <mouth> 
B:  things . 
B:  Not precisely what we want , and that 's  
B:  <mouth> 
B:  that 's wh where it  
B:  it gets difficult . And I  I don't pretend to understand yet what I think 
B:  we really ought to do . 
C:  OK . 


A:  Uh , yeah . but I 'm just  
A:  But the  Yeah , OK . So I just  
A:  this 
A:  XML stuff here just has to do with Source - Path - Goal type stuff , 
A:  in terms of 
C:  Hmm . 
A:  traveling through Heidelberg . 
B:  <mouth> Right . 
A:  Or travel , specifically . 
A:  So , but this O Is the domain greater than that ? 
B:  <breath> No . I think  I think the i the idea is  
D:  <mike noise> 
A:  OK . 
C:  <mike noise> <cough in background> 
B:  that  
B:  Oh . It 's beyond Source - Path - Goal , but I think we don't need to get beyond it @ @   
B:  tourists in Heidelberg . <breath> It seems to me we can get <breath> 
A:  OK . <breath> 
C:  <mike noise>  
B:  all the complexity we want in actions and in language 
B:  without going outside of tourists in Heidelberg . 
B:  OK ? <breath> 
B:  But you know , i depending on what people are interested in , 
B:  one could have , <breath> uh , tours , one could have <breath> 
B:  um , explanations of why something is  is , you know , why  why was this done , or  I mean , no  there 's no end 
B:  to the complexity you can build into the  
B:  <mouth> 
B:  uh , what a tourist in Heidelberg might 
A:  Mmm . 
B:  ask . <breath> 
B:  So , at least  unless somebody else wants t to suggest otherwise I think <breath> 
B:  the general domain 
B:  we don't have t to 
B:  uh , broaden . 
B:  That is , tourists in Heidelberg . 
B:  And if there 's something somebody comes up with that can't be done that way , then , sure . W we 'll  we 'll look at that , but <breath> 
B:  uh  
B:  I 'd be s I I 'd be surprised at  
B:  if there 's any  <breath> 
B:  important issue that  that   


B:  I mean if  if you want to  
B:  uh , push us into reference problems , that would be great . 
F:  OK . 
B:  OK , so this is  his specialty is  reference , 
C:  Mm - hmm . 
B:  and  you know , what  what are these things referring to ? Not only <breath> 
B:  anaphora , but , uh , more generally the , 
B:  uh  
B:  this whole issue of , 
B:  uh , referring expressions , and , what is it that they 're actually 
B:  dealing with in the world ? 
C:  Mm - hmm . 
B:  And , again , this is li in the databa this is also pretty well formed because there is an ontology , 
B:  and the database , and stuff . So it isn't like , <breath> 
B:  um , you know , the Evening Star or stuff like that . I i it  
F:  Right . 
B:  All the entities 
B:  do have concrete reference . Although th the <breath> To get at them from a language may not be trivial . 
F:  Right . 
F:  Right . <inbreath>  
B:  There aren't 
B:  really deep mysteries about 
E:  <cough> 
B:  um , what w what things the system knows about . 
F:  Right . And you have both proper names and descriptions and y and you can ask for it . 
B:  <mouth> 
B:  All those things . Yeah . You have proper names , and descriptions . 
C:  Mm - hmm . 
F:  Right . OK . 
B:  And a l and a lot  and  and anaphora , and pronouns , and  
C:  Nuh . 
F:  Right . 
F:  Right . 
B:  all those things . 
C:  <mouth> Now , we hav the  the whole  Unfortunately , the whole database is , uh , <breath> in German . 
D:  <mike noise> 
C:  We have just commissioned someone to translate some bits of it , IE the e 
C:  the shortest k the  the more general descriptions of all the objects and , um , persons and events . So , it 's a relational database with persons , events , <breath> 
C:  and , um , objects . <breath> 
C:  <mouth> And it 's  it 's quite , um , <breath> 
B:  <mike noise> 
C:  there . But did y I  uh  I think there will be great because the reference problem really is not trivial , even if you have such a g 
C:  well - defined world . 
B:  He knows . <laugh> 
C:  <laugh> Ah - he you are not , uh , throwing uh , uh , carrying owls to Athens . <breath> 
A:  Could you give me an example of a reference problem ? so  so l I can make it more concrete ? 
C:  Well  
C:  <breath> How do I get to the Powder - Tower ? 
C:  We sort of t think that our bit in this problem is interesting , but , just to get from Powder - Tower to an object I ID in a database 
E:  <clears throat> 
C:  is also not really trivial . <breath> 
E:  <mike noise> 
F:  Or  or if you take something even more scary , um , " how do I get to the third building after the Tower ? the Ple - Powder - Tower ? " Uh , you need some mechanism for  
A:  Mmm . <breath> 
B:  Yeah . 
B:  Or , you know , the church across from City Hall , or  
A:  Or the re the restaurant where they wear lederhosen ? Or is that  
C:  Or the <breath> 
F:  Right . 
B:  Yeah , that would be fine . 
E:  <laugh> Uniquely . 
F:  Right . 
A:  OK . <laugh> 
B:  Yeah . 
C:  O or  or tower , or this tower , or that building , or   
F:  Right . 
D:  <mike noise> 
C:  hmm ?  
A:  OK . 
B:  <mouth> Or you can say " how  " you know , " how do I get back ? " 
A:  Trying to  
A:  Yeah , yeah . 
B:  OK . 


B:  uh , I think I 'm gonna try to do , <breath> 
B:  and I guess , pwww !  
B:  let 's say that by the end of spring break , 
B:  I 'll try to come up with some <breath> 
B:  general story about , 
B:  um , construction grammar , and what constructions we 'd use and how all this might 
B:  fit together . There 's this whole framework problem that I 'm feeling really uncomfortable about . <breath> 
B:  And I haven't had a chance to <breath> 
B:  think about it seriously . But I  I want to  
B:  I want to do that early , rather than late . 
B:  And you and I will probably have to talk about this some . 
C:  <inbreath> u u u u 
B:  <inbreath>  
C:  That 's what strikes me , that we sort of  
C:  the de g uh , small  
C:  Something , uh , maybe we should address one of these days , is to  <breath> That most of the work people actually always do is look at some statements , 
C:  and  and analyze those . <breath> Whether it 's abstracts or newspapers and stuff like this . <breath> 
B:  Hmm . <mouth> 
C:  But the whole  i is it  is it really relevant that we are dealing mostly with , sort of , questions ? 
B:  <mouth> Oh , yeah ? Well , I mean yeah , I d 
C:  Uh , you know  
C:  And this is  It seems to me that we should maybe at least spend a session or  or brainstorm a little bit about whether that l 
C:  this is special case in that sense . 
D:  Mm - hmm . 
C:  Um , <long closed-mouth outbreath> 
C:  I don't know . <breath> 
C:  You know  Did we ever find m metaphorical use in  in questions in  in that sense , really ? 
B:  Yeah . 
D:  <mouth> @ @  
B:  You will . 
C:  And how soon , I don't know . 
B:  Oh , yeah . 
B:  I mean , uh , we could take 
B:  all the standard metaphor examples and make question 
B:  versions of them . 
B:  OK . 
F:  Muh - 
C:  " Who got kicked out of France ? " Nuh . 
B:  Yeah , or , you know . " Wh - why is he  why is he pushing for promotion ? " or , " who 's pushing proof " er , just pick  pick any of them and just <breath> 
F:  Right . 
C:  Nuh . 
C:  Mm - hmm . 
B:  do the  eh  
C:  <breath> 
B:  So I don't  I don't think , <mouth> 
B:  uh , it 's at all 
C:  <breath> 
B:  difficult  
B:  Uh , to convert them to question forms that really exist and people say all the time , 
B:  <breath> um  
B:  And  sort of  we don't know how to handle them , too . Right ? I mean , it 's  
B:  I d 
B:  It  
C:  <mike noise> <cough in background> 
B:  We don't know how to handle the declarative forms , 
E:  <breath> 
B:  @ @  
B:  really , 
B:  and , then , the interrogative forms , ah - oh .  
C:  <cough in background> 
B:  Uh . 
C:  <mike noise> 
D:  Ooo !  
B:  Yeah . Nancy , it looked like you were s 
E:  <breath> Oh . it 's just that  that the goals 
E:  are g very different to cases  So we had this problem last year when we first thought about this domain , actually , was that <breath> 
D:  <mike noise> 
E:  most of the things we talked about are our story understanding . Uh , we 're gonna have a short discourse and <breath> the person talking is trying to , 
B:  Right . 
D:  <mike noise> 
E:  I don't know , give you a statement and tell you something . And here , <breath> it 's th <breath> 
C:  Help you create a mental model , blah - blah - blah .  Yeah . 
E:  Yea - eh  y Yeah , I guess so . And then here , y you are j uh , the person is getting information and they or may not be following some larger plan , <breath> 
B:  Yes . 
E:  you know , that we have to recognize or , you know , infer . 
E:  And th th the  their discourse patterns probably <mike noise> 
E:  don't follo follow quite as many 
E:  <breath> logical connec <breath> Yeah . 
B:  <breath> Right . No , I think that 's one of things that 's interesting , is  is in this sort of 
C:  <mike noise> 
E:  <breath> <mike noise> 
B:  over - arching story we  we worked it out for th as you say , this  the storytelling scenario . 
E:  <breath> 
E:  Mm - hmm . 
E:  <breath> 
E:  Mm - hmm . 
B:  And I think it 's really worth thinking through <breath> 
E:  <breath> 
B:  <mouth> 
B:  what it looks like . What is the simspec mean , et cetera . 
E:  Mm - hmm . M 
E:  Right . Cuz for a while we were thinking , " well , how can we change the , <breath> um , data to sort of illicit tha <laugh> illicit , um , actions that are more like what we are used to ? " <breath> 
B:  <mouth> 
D:  <mike noise> 
E:  But obviously we would rather , you know , try to figure out what 's  what 's , you know  


B:  So , if we want to turn it into u understan standing stories about Heidelberg , 
B:  we can do that . 
B:  I mean , that would just be a t a um  
F:  <inbreath>  <outbreath> 
C:  Or , as a matter of fact , we need  <breath> 
B:  <mouth> 
C:  and if we if we ' r eh  take a ten year perspective , we need to do that , <breath> because <breath> 
C:  w 
C:  e w a Assuming we have this , um , we we ta in that case we actually do have these wonderful stories , and historical anecdotes , and 
B:  Yeah . 
E:  Mmm . 
C:  knights jumping out of windows , and - and - and    
C:  tons of stuff . <breath> So , th the database is huge , <breath> 
C:  and if we want to answer a question on that , 
C:  we actually have to go one step before that , and understand that . 
E:  Mm - hmm . 
C:  In order to e do sensible information extraction . And so , <breath> 
E:  Yeah . 
E:  Mm - hmm . 
B:  <mouth> 
B:  You might , yeah . 
F:  Mwa - Mm - hmm .  
C:  um , this has been a  a  a Deep Map research issue that was  is  is part of the unresolved , and to - do 's , and something for the future , is <breath> 
C:  how can we sort of 
C:  run our our text , our content , through a machine <breath> that will enable us , later , to 
E:  Mm - hmm . 
D:  <mike noise> 
C:  retrieve or answer e questions more sensibly ? 
E:  Mmm . 
B:  <mouth> <inbreath> 
B:  Right .  


F:  So , uh  So , uh , I was just going to ask , um , <breath> so , 
F:  what is the  the basic thing that  that you are , um , obligated to do , um , uh , by the summer before w uh y c we can move  
B:  Ah ! 
B:  <mouth> <inbreath> 
B:  OK . So  eh  Yeah . So , what happened is , 
B:  there 's this , eh , uh  Robert was describing 
B:  the  There 's two packages there 's a , 
B:  uh , quote parser , there 's a particular piece 
B:  <mouth> 
B:  of this big system , which , in German , 
B:  uh , takes these t sentence templates and produces XML structures . 
E:  <mike noise> 
F:  Right . 
B:  And one of our jobs was to make the English equivalent of that . 
F:  <mouth> Right . 
B:  That , these guys did in a  in a day . 
F:  Right . 
B:  <mouth> 
B:  The other thing is , at the other end , roughly at the same level , 
B:  there 's something that takes , 
B:  uh , X M L structures , 
B:  produces an output XML structure which is 
B:  instructions for the generator . 
F:  Right . 
B:  <mouth> <inbreath> 
B:  OK ? And then there 's a language generator , and then after that a s a synthesizer that 
B:  goes from an XML structure to , 
B:  uh , language generation , to 
B:  actual specifications for a synthesizer . 
B:  Eh , but again , there 's one module in which there 's one 
F:  Right . 
B:  piece 
B:  <mouth> 
B:  that we have to convert to English . 
F:  Right . 
F:  Got it . <breath> 
B:  Is that  


C:  Now , we have um just , I think two more short things . 
B:  OK . 
C:  Um , 
C:  y you guys sort of started fighting , uh , on the Bayes - net 
E:  <laugh> 
C:  " Noisy - OR " front ? <breath> 
D:  Hmm . 
D:  <laugh> 
D:  Yeah , I thought I should , um , 
D:  talk a little bit about that , because that might be a good , uh , 
D:  sort of architecture to have , in general for , uh , problems with , <breath> 
B:  <mouth> 
B:  Good ! 
B:  OK . 
D:  you know , multiple inputs to a node . 
B:  Good . 
B:  And what 's the other one ? so that  just we know what the d agenda is ? 
C:  Um , the Wu paper , I think maybe  
B:  <breath> Oh , yeah . I 've got a couple new Wu papers as well . Uh , so I  I 've been in contact with Wu , so , probably let 's 
C:  <cough> <cough> 
B:  put that off till I  I  till I understand better , 
B:  <mouth> 
B:  uh , what he 's doing . It 's just a little embarrassing cause all this was in his thesis and I was on his thesis committee , 
E:  <breath-laugh> 
F:  <laugh> 
B:  and , so , <laugh> I r really knew this at one time . 
A:  <laugh> 
F:  Ugh .  
B:  But , I  I  
E:  <cough-laugh> 
B:  It 's not only uh Is  Part of what I haven't figured out yet is  is how all this goes together . 
B:  So I 'll dig up some more 
B:  stuff from Dekai . 
B:  And  so why don't we just do the , uh  
D:  OK . So  <breath> should I  Is there a white board here that I can use ? 
B:  Yeah . You could  
D:  Uh  
E:  Yeah . <breath> 
D:  Or shall I just use this ? 
B:  squealing sound ? 
B:  It 's probably just as easy . I 
F:  Yeah . 
D:  Yeah . 
A:  You can put the microphone in your pocket . 
D:  Hey !  
A:  <laugh> 
E:  <breath> 
A:  I was envying you and your pocket cause I don't have one . <breath-laugh> 
F:  <laugh> 
E:  <laugh> 
E:  It was a quick one , huh ? 
B:  That 's why they invented " pocket T 's " . 
E:  <mike noise> 
E:  They have clips ! <breath> Huh . 
A:  exactly <laugh> 
F:  OK . 
B:  <mouth> 
B:  Uh  
B:  But anyway . So  
B:  And , I thi I think that 's the standard way people 
B:  get around the  
B:  uh  
B:  There are a couple other ones . There are ways of breaking this up into s to  to subnets and stuff like that . But , um  
C:  <mike noise> <cough in background> 
B:  The  
B:  I think we definitely  I think it 's a great idea tha to  to pursue that . 
C:  <mike noise> <cough in background> 
D:  Yep . So  
B:  <mouth> Yeah . 
B:  Anyway . So we may have to  This is with the whole thing ,  we may have to build another data stru  <breath> 
C:  Yep . 
C:  Yep . 
B:  Conceptually , we know what should be done . 
B:  When we see what people have done , it may turn out that the easiest thing to do <breath> 
B:  is to build a  a separate thing that  that 
B:  just pools i i 
C:  <mike noise> <cough in background> 
B:  Like , i i it  it may be , 
B:  that , 
B:  the  the instance  w That we have to build our own 
B:  instance , uh , 
D:  Yeah , it 's  Right , we can just assume  
B:  things , that , 
B:  with their types , and then it goes off to the ontology once you have its type . So we build a little data structure  <breath> And so what we would do in that case , 
C:  <mike noise> <cough in background> 
F:  <breath-laugh> 
B:  is , in our instance gadget have 
C:  <mike noise> 
B:  <mouth> our E V As . <breath> 
B:  And if we d there isn't one we 'd get the type and then have the E V As for the type . So we 'd have our own little , <breath> 
B:  uh , EVA tree . 
D:  Yeah . Right . 
B:  And then , for other , 
B:  uh , vectors that we need . So , we 'd have our own little <breath> things so that whenever we needed one , we 'd just use the ontology to get the type , <breath> 
D:  Mm - hmm .  
D:  Mm - hmm . 
B:  and then would hash or whatever we do to say , " ah ! If it 's that type of thing , 
B:  and we want its EVA vector , pppt - pppt !  
B:  it 's that . " 


D:  Yeah . So , um  <breath> Recall that , uh , 
E:  <breath> <breath> 
A:  <breath> 
D:  we want to have 
D:  this kind of structure in our Bayes - nets . <breath> 
A:  <breath-laugh> 
D:  Namely , that , um  <breath> <mouth> You have these nodes that have several bands , right ? So  
D:  Does I mean , they sort of  <breath> 
D:  the typical example is that , um , these are all a bunch of cues for something , and this is a certain effect that we 'd like to conclude . 
D:  So , uh  <breath> 
D:  Like , let 's just look at the case when , um , this is actually the  the final action , right ? So this is like , uh , <breath> 
D:  you know , 
C:  <mouth> Y 
D:  touch , or  Sorry . Uh  
C:  E - EVA 
C:  <laugh> @ @ <laugh> 
D:  Yeah , E - <while laughing> EVA , right ? 
C:  Yeah . 
D:  Enter , V View , Approach , right ? <breath> <mike noises> 
F:  W what was this ? It  i i i ehhh ,  i ehhh .  <laugh> 
D:  So , this is  
B:  Wri - write it out for for  
D:  Yeah . Enter , 
F:  I mean  <breath-laugh> 
D:  View , 
D:  Approach . 
F:  OK . Right . 
D:  Right . 
D:  So , I mean , we 'd like to  take all these various cues , right ? So this one might be , say , uh  <mouth> <breath> 
C:  <laugh-breath> 
F:  Like the army . Yeah . <laugh> 
E:  New terminology ? <laugh> I haven't heard that before . <breath-laugh> 
C:  <laugh-breath> 
D:  Well , let me pick a random one and say , uh  
B:  <mike noise> 
C:  Hmm ? 
C:  <laugh> 
E:  <breath> 
D:  I don't know , it could be , like  <breath> 
D:  This isn't the way it really is , but let me say  that , suppose someone mentioned , uh , 
D:  admission fees  
D:  <sucking on lower lip>  
D:  Ah , it takes too long . Try  let me just say " Landmark " . 
E:  <laugh> 
D:  If the thing is a landmark , 
D:  you know , <breath> um  then there 's another thing that says if  <breath> 
D:  um  <breath> 
D:  if it 's closed or not , at the moment . 
D:  Alright , so you have nodes . <breath> Right ? And the , uh , problem that we were having was that , you know , given N - nodes , there 's " two to the N "  <breath> 
D:  Given N - nodes , and furthermore , the fact that there 's three things here , we need to specify " three times " , uh , " two to the N " probabilities . <breath> 
D:  Right ? That 's assuming these are all binary , which f they may not be . For example , they could be " time of day " , in which case we could , uh , say , you know , " Morning , 
D:  afternoon , evening , night " . So , this could be more  
E:  <breath> 
D:  So , it 's a lot , anyway . <breath> 
D:  And , that 's a lot of probabilities to put here , which is kind of a pain . So  


D:  Noisy - ORs are a way to , uh , <breath> 
D:  sort of deal with this . 
D:  Um  
D:  Where should I put this ?  
B:  <mouth> 
B:  <long outbreath> 
D:  So , the idea is that , um , <breath> 
D:  Let 's call these , uh , C - one , C - two , C - three , and C - four , and E , for Cause and Effect , I guess . 
D:  The idea is to have these intermediate nodes . <breath> 
D:  Right . 
D:  <mouth> 
D:  <mike noise> 
D:  Well , actually , the idea , first of all , is that each of these things has a  quote - unquote distinguished state , which means that this is 
D:  <mouth> the state in which we don't really know anything about it . So  right ? <breath> 
D:  So , for example , if we don't really know <breath> if the thing is a landmark or not , 
D:  Or , i if that just doesn't seem relevant , then that would be th sort of the Disting - the Distinguish state . It 's a really , you know , <breath> 
D:  if there is something for the person talking about the admission fee , 
D:  you know , if they didn't talk about it , that would be the Distinguish state . <breath> 
C:  <mouth> S so , this is a fanciful way of saying " default " ? 
D:  So  <outbreath> 
D:  Yeah , yeah . That 's just what they  the word they used in that paper . <breath> 
C:  OK . 
C:  Mm - hmm . 
D:  So , the idea is that , um , <breath> you have these intermediate nodes , right ? E - one , E - two , E - three and E - four ? 
B:  <mouth> 
B:  So , this is the Heckerman paper you 're working with ? Good . 
D:  Yeah . 
D:  So  
D:  The idea is that , each of these EI  
D:  is  <mouth> 
D:  represents what this would be  
D:  if all the other ones were in the distinguish state . Right ? <breath> 
D:  So , for example , suppose that the person  I mean , suppose the thing that they talked about is a landmark . <breath> 
D:  But none of the other  <breath> sort of cues really apply . 
D:  Then , <cough> this would be  <breath> 
D:  W The <breath> this would just represent the probability distribution of this , 
D:  assuming that this cue is turned on and the other ones just didn't apply ? <breath> 
D:  So , you know , if it is a landmark , and no none of the other things really ap applicable , then  this would represent the probability distribution . So maybe in this case  <breath> 
D:  Maybe we just t k Maybe we decide that , if the thing 's a landmark and we don't know anything else , then we 're gonna conclude that , um  <breath> 
D:  They want to view it with probability , you know , point four .  They want to enter it with probability , uh  
D:  with probability point five  and they want to approach it probability point one , say  
D:  Right ? So we come up with these l little tables for each of those  
D:  OK . <mike noise> 
D:  And the final thing is that , um  <breath> <mouth> 
D:  this is a deterministic function of these , <breath> 
D:  so we don't need to specify any probabilities . 
C:  <mike noise> <cough in background> 
D:  We just have to , um , say what function this is , right ? 
D:  So we can let this be , um  
D:  <breath> G of E - one comma E - two . 
D:  E - three , E - four . 
D:  Right ? 
D:  and our example G would be , um , <breath> 
D:  a majority vote ? 
D:  Right ? 
D:  <mike noise> 
B:  Well . OK , so th so the important point  
B:  is  
B:  W not what the G function is . 
B:  The important point is  
E:  <sniff> 
C:  <mike noise> 
E:  <breath> 
B:  that  
B:  Um  
B:  There is a  a  a general kind of idea of shortcutting the full CPT . Th - c the full conditional probability table  with some function . 
B:  <mouth> 
B:  OK ? Which y w you choose appropriately for each case . So , depending on <breath> what your situation is , there are different functions which are most appropriate . 
B:  And  
B:  So I gave  eh  Bhaskara a copy of this , eh  sort of " ninety - two "  paper . D and you got one , Robert . I don't know who else has seen it . 
D:  Mm - hmm . 
D:  There 's  I mean  yeah . it 's Heckerman and Breese . 
B:  It 's short . 
B:  It 's short . 
D:  Yeah . 
B:  So , I u w Um , yo uh  you  Have you read it yet ? 
D:  <mike noise> 
D:  Uh , you can  Yeah , you should take a look at it , I guess . 
B:  OK , so you should take a look . Nancy , I 'm sure you read it at some point in life . 
A:  OK <breath> 
D:  <mike noise> 
E:  I  yeah . I  I think so , yeah . 
B:  OK . <inbreath> 
E:  Yeah , @ @ . 
B:  And  so , you other guys can decide how interested  Anyway . So the paper isn't th isn't real hard . <breath> And  


B:  One of the questions just come at Bhaskara is , 
B:  " How much of this does JavaBayes support ? " 
D:  Yeah , it 's a good question . Um  <breath> 
D:  <mike noise> 
D:  The  so what we want , is basically JavaBayes to support deterministic , uh , functions . <breath> 
B:  Right . 
D:  And , um  <breath> In a sense it sup we can make it supported by , um , <breath> manually , uh , entering , you know , probabilities that are one and zeros , right ? <breath> 
B:  Right . So the little handout that  The little thing that I sent  I sent a message saying , 
B:  uh , here is a way to take  
B:  One thing you could do , which is kind of s in a way , stupid , is take this deterministic function , 
B:  and use it to build the CPT . 
B:  So , if Ba - JavaBayes won't do it for you , 
C:  Mmm . 
B:  that you can convert all that into what the CPT would be . 
B:  Um  and , what I sent out about a week ago , was an idea of how to do that , 
C:  <mike noise> 
B:  for , 
B:  um , evidence combination . So one of  one function that you could use as your " G function " is an e e Evidence - Combining . So you just take <breath> the  
B:  uh , if each of th if each of the ones has its own 
B:  little table like that , <breath> then you could take the , 
B:  uh , strength of each of those , times its little table , and you 'd add up the total evidence for " V " , " E " , and " A " . 
D:  Mmm .  
D:  I don't think you can do this , because  <breath> 
E:  Mm - hmm . 
B:  <mouth> Yep . 
D:  G is a function from  
D:  that <breath> 
D:  to that .  
B:  <mouth> Right . 
D:  Right ? So there 's no numbers . There 's just  
B:  <mike noise> 
D:  quadruplets of  well , N - duplets of , uh , E Vs . 
B:  I i i 
B:  No , no  But I 'm saying is  There  
B:  <mouth> 
B:  <mouth> There is a w I mean , if y if  if you decide what 's  what is appropriate , is probablistic evidence combination , you can write a function 
B:  that does it . It 's a pui it 's actually one of the examples he 's got in there . 


B:  But , anyway , s skipping  skipping the question of exactly which functions  
B:  now is it clear 
B:  that you might like to be able to 
B:  shortcut 
B:  the whole conditional probability table . 
C:  I mean , in some  it seems very plausible in some sense , where we will be likely to not be  observe some of the stuff . 
C:  Cuz we don't have the a access to the information . 
D:  <bang in background, of something being dropped> 
D:  Oops ,  sorry . <breath> 
B:  Right . That 's one of the problems , is , W Is  is , Where would th Where would it all come from ? 
C:  Yeah . 
C:  So . 
D:  Is  Oh , right . W would not be ab able to observe  
E:  Mmm . 
D:  What ? 
C:  I if it 's a  a  a discar Discourse Initial Phrase , we will have nothing in the discourse history . 
B:  <mouth> <inbreath> 
B:  <inbreath>  
C:  So , if  if we ever want to wonder what was mention 
D:  <inbreath> Oh   
D:  Oh . A are you saying that we 'll not be able to observe certain nodes ? That 's fine . That is sort of orthogonal thing . 
B:  <inbreath> 
B:  <outbreath>  
B:  Yeah , so there 's  there 's two separate things , Robert . 
B:  The f the  the  the Bayes - nets in general are quite good 
B:  at saying , " if you have no current information about this variable just take the prior for that . " 
B:  OK ? Th - that 's what they 're real good at . 
B:  So , if you don't have any information about the discourse , 
B:  you just use your priors of  of whatever  
B:  eh the  discourse  
B:  uh , 
B:  eh , basically whatever w it 's  Probabilistically , whatever it would be . And it 's  it 's sort of not a great estimate , but  
C:  Mm - hmm . 
B:  it 's the best one you have , <breath> 
B:  and , so forth . So that , they 're good at . But the other problem is , how do you fill in all these numbers ? 
B:  And I think that 's the one he was getting at . 
E:  Mm - hmm . Yeah . 
D:  Yeah . So , specifically in this case you have to  f 
D:  have this many numbers , whereas in this case you just have to have three for this , three for this , three for this . Right ? <breath> So you have to have just 
C:  Mm - hmm . 
D:  three N ? 
D:  So , this is much smaller than that . <mike noise> 
D:  <mike noise> 
A:  Asymptotically . <laugh> 
E:  Mm - hmm . 
A:  <laugh> 
D:  Yeah .  Right . 
B:  Well , pretty quickly . 
A:  U yeah , yeah . <laugh> 
B:  I mean  
E:  So , you don't need da data enough to cover  uh , nearly as much stuff . 
F:  <breath-laugh> 
D:  I don't know . 


A:  So , really , i What a  A Noisy - OR seems to kind of  
B:  <inbreath>  
A:  " neural - net - acize " these Bayes - nets ? 
B:  <mouth> 
B:  Eh  well to some No , no . So , " Noisy - OR " is a funny 
E:  <mike noise> <laugh> 
B:  way of referring to this , because 
B:  <mouth> 
B:  the Noisy - OR is only one instance . 
D:  Yeah . This isn't a Noisy - OR anymore . 
B:  That one actually isn't a Noisy - OR . So we 'll have to think of <breath> 
A:  Yeah . 
B:  of a way t t 
D:  it 's a Noisy - arg - max or a Noisy - whatever .  <breath-laugh> 
B:  Yeah , whatever . Yeah . <breath> So  
E:  <laugh> 
B:  Eh   
B:  Um  
A:  Well , my point was more that we just  eh  With the neural net , right , eh , things come in , you have a function that combines them and   
B:  Yeah , it  it  Tha - that 's true . It is a is also more neural - net - like , although  <breath> 
B:  Uh , it isn't necessarily sum  
B:  uh , s you know , sum of weights or anything like that . 
A:  Right . <breath> 
B:  I mean i You could have , <breath> 
B:  uh , like the Noisy - OR function , 
B:  really is one that 's essentially says , uh , take the max . 
D:  Well , the " OR " . 
B:  Same . 
D:  Right . I guess you 're right . Yeah . 
B:  Uh  


C:  Wha - still sort of leaves one question . 
C:  It  I mean you  you can always uh  see easily that  that I 'm not grasping everything correctly , but <breath> what seemed attractive to me in im uh in the last discussion we had , was <breath> 
C:  that we find out a means of  
C:  of getting these point four , point five , point one , 
C:  of C - four , 
C:  not because , you know , A is a Landmark or not , but we  we  we label this whatever object type , <breath> 
C:  and if it 's a garden , 
C:  it 's point three , point four , point two . If it 's a castle , it 's point eight , point one , point one . If it 's , <breath> uh , a town hall , it 's point two , point three , point five . <breath> 
B:  <mouth> Right . 
C:  And so forth . <breath> 
C:  And we don't want to write this down  
C:  necessarily every time for something but , uh  
D:  It 'll be students  Where else would it be stored ? That 's the question . 
C:  let 's see . 
C:  Well , in the beginning , we 'll write up a flat file . We know we have twenty object types and we 'll write it down in a flat file . 
B:  Oh . 
B:  Yeah . 
B:  No . So , i is 
B:  Well , let me say something , guys , cuz there 's not  There 's a pretty point about this we might as well get in right now . 
D:  Mm - hmm . 
B:  Which is  
B:  The hierarchy that s comes with the ontology 
B:  is just what you want for this . So that  
B:  <mouth> Uh , if you know about it  let 's say , a particular town hall  <breath> 
B:  that , it 's one that is a monument , <breath> 
B:  then , that would be stored there . <breath> 
B:  If you don't , you look up the hierarchy , 
B:  Eh  so , you  you  you may or  So , then you 'd have this little vector of , 
B:  um , you know , Approach Mode or EVA Mode . Let 's  OK , so we have <breath> the EVA vector for  for various kinds of landmarks . <breath> If you know it for a specific landmark you put it there . 
E:  <laugh-breath> 
B:  If you don't , you just go up the hierarchy to the first place you find one . 
D:  OK . 
D:  So , is the idea to put it in the ontology ? 
B:  Absolutely . 
D:  OK . 
B:  Uh , or , link to  or  but  but in any case  i View it logically as being in the ontology . It 's part of what you know about  
B:  a  an object , <breath> is its EVA vector . 
D:  OK . Mm - hmm . 
B:  And , if yo As I say , if you know about a specific object , you put it there . This is part of what Dekai was doing . 
B:  So , when we get to Wu , 
D:  Right . 
B:  The - e We 'll see w what he says about that . 
B:  And , then if you  
B:  If it isn't there , it 's higher , and if you don't know anything except that it 's a b it 's  it 's a  building , then up at the highest thing , you have the pr what amounts to a prior . 
B:  If you don't know anything else about a building , <breath> 
B:  uh , you just take whatever your crude approximation is up at that level , which might be equal , or whatever it is . 
D:  Right . 
D:  Yeah . 
B:  <mouth> So , that 's a very pretty relationship between 
B:  these local vectors and the ontology . 
B:  And it seems to me the obvious thing to do , unless 
B:  <mouth> 
B:  we find a reason to do something different . 
D:  Yeah . 
B:  Does this make sense to you ? Bhask - ? 
D:  So  
D:  Yeah . 


D:  So , we are  but we  we 're not doing the ontology , so we have to get to whoever is doing the  u ultimately , 
B:  <vocal squeak> 
B:  Indeed . So , that 's another thing we 're gonna need to do , is  is , to , 
D:  we have to get them to  
B:  either  
B:  <mouth> We 're gonna need some way to either get a p tag in the ontology , or add fields , or    <breath> 
B:  some way to associate  Or , w It may be that all we can do is , um , some of our own hash tables that it    
B:  Th - the  th you know , there 's always a way to do that . It 's a just a question of  <breath> 
B:  i  
A:  Yeah , hash on object name to , you know , uh , the probabilities or whatever . 
B:  th 
B:  Yeah . 
B:  e 
B:  Right . And , so , 
B:  i  
B:  uh  
C:  But it 's , uh  <clears throat> Well , it strikes me as a What For - 
C:  If we get the mechanism , 
C:  that will be sort of the wonderful part . And then , <breath> 
B:  <mouth> 
C:  how to make it work is  is the second part , in the sense that  
C:  I mean , m the guy who was doing the ontology  
C:  eh , eh , s ap apologized that i it will take him another through  
C:  two to three days because they 're having really trouble getting the upper level 
C:  straight , and 
C:  right now . <breath> The reason is , <breath> 
C:  given the craw bet uh , the  the  the projects 
C:  that all carry their own taxonomy and , on all history , <breath> 
C:  they 're really trying to build one top level ontology ft that covers all the EML projects , and that 's , uh , uh , sort of a tough cookie , a little bit tougher than they <breath> 
C:  figured . I could have told them s so . Uh . <breath> 
A:  <laugh-breath> <laugh-breath> 
B:  Right . Yeah . 
C:  But , nevertheless , it 's going to be there by n by , uh , next Monday and I will show you what 's  what some examples <breath> from that for towers , and stuff .  <breath> 
A:  <laugh-breath> 
C:  And , um , 
C:  what I don't think is ever going to be in the ontology , is sort of , you know , the likelihood of , eh , people entering r 
C:  town halls , and looking at town halls , and approaching town halls , <breath> 
C:  especially since we are b dealing with a case - based , not an instance - based ontology . <breath> 
C:  So , there will be nothing on  on that town hall , or on the Berkeley town hall , or on the <breath> 
C:  Heidelberg town hall , it 'll just be information on town halls . <breath> 
C:  But what  
B:  Well , they  they  they  How ar What are they gonna do with instances ? I mean , you  y 
C:  Well , that 's  Hhh .  
C:  That 's  that 's al different question . I mean , th the  first , they had to make a design question , <breath> 
C:  " do we take ontologies that have instances ? or just one that does not , that just has the types ? " <breath> 
B:  OK . 
C:  And , so , since the d decision was on types , on a d simply type - based , <breath> 
C:  we now have to hook it up to instances . 
C:  I mean this is 
C:  one  
B:  But what i What is SmartKom gonna do about that ? 
B:  Cuz , they have instances all the time . <breath> 
C:  Yeah , but the ontology is really not a SmartKom 
C:  thing , 
C:  in  in and of itself . That 's more something that <breath> 
C:  I kicked loose 
C:  in  in EML . So it 's a completely EML 
C:  thing .  
B:  But  
B:  Uh  uh  SmartKom 's gonna need an ontology .  
C:  Yes , u a w a lot of people are aware of that . 
B:  I understand , <cough-laugh> but is anybody doing anything about it ? <cough-laugh> 
C:  <laugh> <breath> 
E:  <laugh-breath> 
E:  <breath-laugh> 
C:  Um  
B:  OK . It 's a political problem . We won't worry about it . <laugh> 
C:  <clears throat> <breath> 
C:  No , but  th the r eh  I th I still think that 
B:  <outbreath> 
C:  there is enough information in there . <breath> 
C:  For example , whether  OK . So , th it will know about the twenty object types there are in the world . 
C:  Let 's assume there are only twenty object types in this world . 
E:  <breath-laugh> 
C:  And it will know if any of those have institutional meanings . 
E:  <breath> 
C:  So , in a sense , " I " used as Institutions for some s in some sense or the other . <breath> 
C:  Which makes them  
C:  enterable . 
C:  Right ? In a sense . You know . 


B:  So , I I think we can handle that . And then  But , the combination functions , 
B:  and whether we can put those in Java Bayes , and all that sort of stuff , 
B:  is , uh  is the bigger deal . 
D:  Yeah . 
B:  I think that 's where we have to get technically clever . 
D:  Um  
A:  We could just steal the classes in JavaBayes and then 
A:  interface to them with our own code . 
B:  Well , I me ye <mike noise> eh , yeah , the  
D:  That requires understanding the classes in JavaBayes , I guess . 
B:  Yeah , I mean , it 's , uh , e e e e e cute . 
B:  <laugh> 
B:  I mean , you 've been around enough to  
B:  I mean  
B:  Just ? 
A:  Well , it depends on  
B:  I mean , there 's this huge package which  which may or may not be consistent and   you know .  <breath> 
E:  <breath-laugh> 
B:  But , yeah , we could look at it . 
A:  Well , I was j OK . Yeah . <breath> 
B:  Yeah . 
B:  It 's b It  
B:  <mouth> It 's an inter sort of a kind of a  it  The thing is , it 's kind of an interpreter and i i it expects its data structures to 
B:  be in a given form , and if you say , " hey , we 're gonna <breath> 
E:  <yawn> 
B:  make a different kind of data structure to stick in there  "  
A:  Well , no , but that just means there 's a protocol , 
A:  right ? That you could  
B:  It may or may not . I don't know . That 's the question is " to what extent does it allow us to put in these G functions ? " 
E:  <breath-cough> 
B:  And I don't know . 
A:  Well , no , but  I mean  What I uh the  
A:  So you could have four different Bayes - nets that you 're running , and then run your own  write your own function that would take the output of those four , 
A:  and make your own " G function " , is what I was saying . 
B:  Yeah , that 's fine if it 's  if it comes only at the end . But suppose you want it embedded ? 
A:  Well , then you 'd have to break all of your Bayes - nets into smaller Bayes - nets , with all the  
B:  Oh , that  Yeah , that 's a truly horrible way to do d it . One would hope  
A:  Yeah , but I 'm just  
C:  Mm - hmm . 
B:  Yeah , yeah , yeah , yeah , yeah , you bet . 
B:  But , at that point you may say , " hey , Java Bayes isn't the only package in town . Let 's see if there 's 
E:  <breath-laugh> 
B:  another package that 's , eh , more civilized about this . " 
D:  @ @ .  
B:  Now , Srini 
D:  Mmm . <mike noise> 
B:  is worth talking to on this , 
B:  cuz he 
B:  said that he actually did 
B:  hack some combining functions into JavaBayes. 
D:  Ah ! 
B:  But he doesn't remember  at least when I talked to him , he didn't remember <breath> 
B:  whether it was an e an easy thing , a natural thing , or whether he had to do some violence to it to make it work . 
A:  <breath> 
D:  <laugh> 
B:  Uh . But he did do it . 
D:  <inbreath> Yeah .  
D:  I don't see why the , uh , combining f functions have to be directly hacked into JavaBayes. I mean , they 're used to create tables so we can just make our own little functions that create tables in XML . 
E:  <breath> 
B:  Well , I say that 's one way to do it , is  is to just convert it 
B:  int into a  into a C P T that you zip  
B:  It 's blown up , and is a  it 's , uh  it 's huge , but  <breath> 
B:  it doesn't require any 
D:  Mm - hmm . 
B:  data fitting or complication . 
D:  Yeah . 
D:  I don't think  I mean , the fact that it blown u blows up is a huge issue in the sense that  
D:  I mean , OK . So say it blows up , right ? So there 's , like , 
D:  the 
D:  you know , ten , f ten , fifteen , uh , things . It 's gonna be like , two to the  
D:  that , which isn't so bad . 
B:  I I understand . I 'm just saying tha that w 
B:  That was wi that was my note . 
B:  The little note I sent said that . 
D:  Mm - hmm . 
B:  It said , " Here 's the way you 'd take 
B:  the logical f G function and turn it into a CPT . " 
D:  Mm - hmm . 
B:  I mean that  the Max - the Evidence - Combining function . 
B:  So we could do that . And maybe that 's what we 'll do . 
B:  <mouth> 
B:  But , um  
B:  don't know . 


B:  So , I will , e <inbreath> e before next week , uh , @ @  
B:  p push  push some more on  on this stuff that Dekai Wu did , <breath> 
B:  and try to understand it . 
B:  Uh , you 'll make a couple of more copies of the Heckerman paper to give 
D:  p Sure . 
F:  Yeah , I  I would like a copy , y y yeah . 
B:  to people ? 
D:  OK . 
B:  OK . 
F:  <mouth> OK . 
B:  And , um  
B:  <mouth> I think  
C:  OK . And I I 'll  I 'll think s through this , uh , <breath> 
C:  eh  getting EVA vectors dynamically out of ontologies one more time because I s I  I  I 'm not quite sure whether we all think of the same thing or not , here . <breath> 
B:  <mouth> Well , you and I should talk about it . 
C:  Yeah , uh - huh . 
C:  OK . 
B:  Alright , great ! <breath> 
B:  And , Robert , thank you for <breath> 
B:  coming in 
C:  <clears throat> 
B:  under  He  he 's been sick , Robert .  
C:  <mouth> Und . 
E:  Mm - hmm . 
A:  I was thinking maybe we should just cough into the microphone and see if they can't  th see if they can handle it .  
D:  <laugh> 
E:  <laugh> 
A:  <laugh> 
D:  <laugh> 
D:  <computer keyboard typing in background> 
D:  Yep . 
E:  Sure . 
E:  <mike noise> 
D:  <background noise> <mike noise> 
C:  Um  is this , uh  
D:  <mike noise>  



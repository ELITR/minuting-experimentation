C:  Oh , right . 
C:  Yeah , we had a long discussion about how much w how easy we want to make it for people to bleep things out . 
C:  So  
C:  Morgan wants to make it hard . 
C:  Did  did  did it  ? 
C:  I didn't even check yesterday whether it was moving . 
C:  So . 
C:  Channel three ? 
C:  Channel three ? 
C:  Mm - hmm ? 
C:  Yeah , 
C:  it has a little indicator on it  on the AF . 
C:  Yep . 
C:  Test . 
C:  What ? 
C:  Did you see Hannibal recently or something ? 

C:  Yeah . 
C:  Yeah , I 'm  I 'm familiar with that . 
C:  I mean , we  I sort of already have developed an XML format for this sort of stuff . 
C:  And so the only question  is it the sort of thing that you want to use or not ? 
C:  Have you looked at that ? 
C:  I mean , I had a web page up . 
C:  So  
C:  You mean , this  
C:  I guess I am gonna be standing up and drawing on the board . 
C:  Um , so  so it definitely had that as a concept . 
C:  So tha it has a single time - line , 
C:  and then you can have lots of different sections , 
C:  each of which have I Ds attached to it , 
C:  and then you can refer from other sections to those I Ds , 
C:  if you want to . 
C:  So that , 
C:  um  
C:  so that you start with  with a time - line tag . 
C:  " Time - line " . 
C:  And then you have a bunch of times . 
C:  I don't e I don't remember exactly what my notation was , 
C:  but it  
C:  Yeah , 
C:  " T equals one point three two " , 
C:  uh  
C:  And then I  I also had optional things like accuracy , 
C:  and then " ID equals T one , uh , one seven " . 
C:  And then , <writing on whiteboard> I also wanted to  to be i to be able to not specify specifically what the time was and just have a stamp . 
C:  Yeah , so these are arbitrary , assigned by a program , 
C:  not  not by a user . 
C:  So you have a whole bunch of those . 
C:  And then somewhere la further down you might have something like an utterance tag 
C:  which has " start equals T - seventeen , 
C:  end equals T - eighteen " . 
C:  So what that 's saying is , we know it starts at this particular time . 
C:  We don't know when it ends . 
C:  Right ? 
C:  But it ends at this T - eighteen , 
C:  which may be somewhere else . 
C:  We say there 's another utterance . 
C:  We don't know what the t time actually is 
C:  but we know that it 's the same time as this end time . 
C:  You know , thirty - eight , 
C:  whatever you want . 
C:  OK . 
C:  Yes , 
C:  exactly . 
C:  And then , uh  and then these also have I Ds . 
C:  Right ? 
C:  So you could  you could have some sort of other  other tag later in the file that would be something like , um , oh , I don't know ,  uh , <writing on whiteboard> " noise - type equals <writing on whiteboard> door - slam " . 
C:  You know ? 
C:  And then , uh , <writing on whiteboard> you could either say " time equals a particular time - mark " or you could do other sorts of references . 
C:  So  or  or you might have a prosody  
C:  " Prosody " 
C:  right ? D ? T ? 
C:  D ? T ? 
C:  T ? 
C:  You like the D ? 
C:  That 's a good D . 
C:  Um , 
C:  you know , so you could have some sort of type here , 
C:  and then you could have , 
C:  um  
C:  the utterance that it 's referring to could be U - seventeen or something like that . 
C:  Oh , well . 
C:  Right . 
C:  That 's , the who that 's why you do that extra level of indirection . 
C:  So that you can just change the time - line . 
C:  Yes . 
C:  Yeah , this  
C:  I don't think I would do this for phone - level . 
C:  I think for phone - level you want to use some sort of binary representation 
C:  because it 'll be too dense otherwise . 
C:  I would use just an existing  an existing way of doing it . 
C:  It 's parsing limitations . 
C:  I don't want to have this text file that you have to read in the whole thing to do something very simple for . 
C:  Right . 
C:  I mean , you 'd  y 
C:  I  I am imagining you 'd have multiple versions of this depending on the information that you want . 
C:  Um , 
C:  I 'm just  
C:  what I 'm wondering is whether  
C:  I think for word - level , this would be OK . 
C:  For word - level , it 's alright . 
C:  For lower than word - level , you 're talking about so much data that I just  I don't know . 
C:  I don't know if that  
C:  Yeah , I mean , for something like that I would use P - file 
C:  or  or any frame - level stuff I would use P - file . 
C:  Uh , that 's a  well , or something like it . 
C:  It 's ICS uh , ICSI has a format for frame - level representation of features . 
C:  Um . 
C:  Right . 
C:  Right . 
C:  Or  or there 's a  there 's a particular way in XML to refer to external resources . 
C:  So you would say " refer to this external file " . 
C:  Um , 
C:  so that external file wouldn't be in  
C:  More compact , 
C:  which I think is  is better . 
C:  I mean , if you did it at this  
C:  You don't want to do it with that  
C:  Anything at frame - level you had better encode binary 
C:  or it 's gonna be really painful . 
C:  Well , but if you 're talking about one per frame , you 're talking about gigabyte - size files . 
C:  You 're gonna actually run out of space in your filesystem for one file . 
C:  Right ? 
C:  Because you have a two - gigabyte limit on most O Ss . 
C:  Yep . 
C:  So I think it  it 's debatable whether you want to do phone - level in the same thing . 
C:  But I think , a anything at frame - level , even P - file , is too verbose . 
C:  I would use something tighter than P - files . 
C:  So . 
C:  It 's whatever you want , actually . 
C:  So that  what 's nice about the P - file  It  i 
C:  Built into it is the concept of  frames , utterances , sentences , that sort of thing , that structure . 
C:  And then also attached to it is an arbitrary vector of values . 
C:  And it can take different types . 
C:  So it  th they don't all have to be floats . 
C:  You know , you can have integers and you can have doubles , and all that sort of stuff . 
C:  Um . 
C:  Right ? 
C:  And it has a header  it has a header format that  describes it  to some extent . 
C:  So , 
C:  the only problem with it is it 's actually storing the  utterance numbers and the  frame numbers in the file , 
C:  even though they 're always sequential . 
C:  And so it does waste a lot of space . 
C:  But it 's still a lot tighter than  than ASCII . 
C:  And we have a lot of tools already to deal with it . 
C:  Yeah , 
C:  there 's a ton of it . 
C:  Man - pages and , uh , source code , and me . 
C:  Yeah , it 's not standard . 
C:  I mean , it 's something that we developed at ICSI . 
C:  But , uh  
C:  But it 's been used here 
C:  and  and , you know , we have a  well - configured system that you can distribute for free , 
C:  and  
C:  Well , what does H T K do for features ? 
C:  Or does it even have a concept of features ? 
C:  I 'm just wondering , would it be worth while to use that instead ? 
C:  They generate their own . 
C:  Ah , right . 
C:  Right . 
C:  And a and again , if you have a  
C:  if you have a two - hour - long meeting , that 's gonna  
C:  Yeah , I mean , they 'd be emo enormous . 
C:  Right . 
C:  Yeah . 
C:  Right . 
C:  Yeah , the other thing  
C:  We should look at ATLAS , 
C:  the NIST thing , 
C:  and see if they have anything at that level . 
C:  I mean , I 'm not sure what to do about this with ATLAS , 
C:  because they chose a different route . 
C:  I chose something that  
C:  Th - there are sort of two choices . 
C:  Your  your file format can know about  know that you 're talking about language  and speech , which is what I chose , and time , 
C:  or your file format can just be a graph representation . 
C:  And then the application has to impose the structure on top . 
C:  So what it looked like ATLAS chose is , they chose the other way , 
C:  which was their file format is just nodes and links , 
C:  and you have to interpret what they mean yourself . 
C:  Uh , because I knew that we were doing speech , 
C:  and I thought it was better if you 're looking at a raw file to be  t for the tags to say " it 's an utterance " , as opposed to the tag to say " it 's a link " . 
C:  So , but  
C:  Yeah , 
C:  they 're reasonably compatible . 
C:  Yep . 
C:  So , 
C:  well , the other thing is if we choose to use ATLAS , which maybe we should just do , we should just throw this out before we invest a lot of time in it . 
C:  Yeah . 
C:  Yeah . 
C:  The only thing  
C:  Yeah . 
C:  I mean , I  I chose this for a couple reasons . 
C:  One of them is that it 's easy to parse . 
C:  You don't need a full XML parser . 
C:  It 's very easy to just write a Perl script  to parse it . 
C:  Exactly . 
C:  Exactly . 
C:  Which I always do . 
C:  Well , I have it structured . 
C:  Right ? 
C:  So each type tag has only particular items that it can take . 
C:  Sure . 
C:  If you have more information . 
C:  So what  What NIST would say is that instead of doing this , you would say something like " link <writing on whiteboard> start equals , um , you know , some node ID , 
C:  end equals some other node ID " , 
C:  and then " type " would be " utterance " . 
C:  You know , so it 's very similar . 
C:  Write a translator . 
C:  But it se 
C:  Since they are developing a big  
C:  they 're developing a big infrastructure . 
C:  And so it seems to me that if  if we want to use that , we might as well go directly to what they 're doing , rather than  
C:  The  I looked at it  
C:  The last time I looked at it was a while ago , 
C:  probably a year ago , 
C:  uh , when we first started talking about this . 
C:  And at that time at least <breath> it was still not very  complete . 
C:  And so , specifically they didn't have any external format representation at that time . 
C:  They just had the sort of conceptual  node  uh , annotated transcription graph , 
C:  which I really liked . 
C:  And that 's exactly what this stuff is based on . 
C:  Since then , they 've developed their own external file format , 
C:  which is , uh , you know , this sort of s this sort of thing . 
C:  Um , and apparently they 've also developed a lot of tools , 
C:  but I haven't looked at them . 
C:  Maybe I should . 
C:  Um , th what would  would  would  what would worry me is that maybe we might miss a little detail 
C:  that would make it very difficult to translate from one to the other . 
C:  Yeah , we might as well . 
C:  Yep . 
C:  So I 'll  I 'll take a closer look at it . 
C:  And  
C:  Right . 
C:  The  
C:  Yep . 
C:  The other thing  the other way that I sort of established this was as easy translation to and from the Transcriber format . 
C:  Um , 
C:  but  
C:  Yep . 
C:  It 's almost the same . 
C:  The  the  the  the point is  with this , though , is that you can't really add any supplementary information . 
C:  Right ? 
C:  So if you suddenly decide that you want  
C:  Yeah . 
C:  You 'd have to make a different type . 
C:  Right . 
C:  Right . 
C:  Yep . 
C:  Right . 
C:  Right . 
C:  Huge . 
C:  Um , 
C:  there 's a spea speaker tag up at the top which identifies them 
C:  and then each utt 
C:  the way I had it is each turn or each utterance ,  I don't even remember now , had a speaker ID tag attached to it . 
C:  And in this format you would have a different tag , 
C:  which  which would , uh , be linked to the link . 
C:  So  so somewhere else you would have another thing  that would be , 
C:  um  
C:  Let 's see , would it be a node or a link ? 
C:  Um  
C:  And so  so this one would have , um , an ID is link   link seventy - four or something like that . 
C:  And then somewhere up here you would have a link that  that , uh , you know , was referencing L - seventy - four and had speaker Adam . 
C:  You know , 
C:  or something like that . 
C:  This isn't quite right . 
C:  I have to look at it again . 
C:  Um , you would have another structure lower down than this that would be saying they 're all belonging to this ID . 
C:  Right . 
C:  And then each utterance could refer to a turn , 
C:  and each turn could refer to something higher up . 
C:  Well , that 's why I didn't call it " sentence " . 
C:  Yeah . 
C:  Sure . 
C:  I mean , so you would  you would have yet another tag . 
C:  You 'd have another tag which says this is of type " sentence " . 
C:  And , 
C:  what  
C:  Right . 
C:  You would have another tag somewhere . 
C:  It 's  well , there 're two ways of doing it . 
C:  You could have some sort of link type  
C:  type equals " sentence " , 
C:  and ID is " S - whatever " . 
C:  And then lower down you could have an utterance . 
C:  So the type is " utterance "  equals " utt " . 
C:  And you could either say that  
C:  No . 
C:  I don't know  
C:  I take that back . 
C:  Can you  can you say that this is part of this , 
C:  or do you say this is part of this ? 
C:  I think  
C:  So  
C:  Right . 
C:  Well , I think I 'm  I think w I had better look at it again 
C:  because I  I 'm  
C:  There 's one level  there 's one more level of indirection that I 'm forgetting . 
C:  Right . 
C:  I I 'm pretty sure that you can do that , 
C:  but I 'm forgetting the exact level of nesting . 
C:  So  so what you would end up having is a tag saying " here 's a word , 
C:  and it starts here and it ends here " . 
C:  And then lower down you would say " here 's a prosodic boundary 
C:  and it has these words in it " . 
C:  And lower down you 'd have " here 's a sentence , 
C:  and it has these words in it " . 
C:  Yep . 
C:  So I think that 's  that would wor 
C:  Let me look at it again . 
C:  So . 
C:  Well  
C:  Right . 
C:  I mean , that 's gonna be  
C:  Is the rising pitch a  feature , 
C:  or is it gonna be in the same file ? 
C:  But the  
C:  I mean , that 's gonna be hard regardless , 
C:  right ? 
C:  Because you 're gonna have to write a program that goes through your feature file and looks for rising pitches . 
C:  OK . 
C:  Well , in that case you would add that to this  format 
C:  r 
C:  Right . 
C:  You have that . 
C:  There 's a  standard again in XML , specifically for searching XML documents  structured X - XML documents , where you can specify both the content and the structural position . 
C:  You use it as a tool . 
C:  You use it as a tool , 
C:  not an end - user . 
C:  It 's not an end - user thing . 
C:  It 's  it 's  you would use that to build your tool to do that sort of search . 
C:  It 's a graph , 
C:  but  
C:  Well , 
C:  no , no , no . 
C:  The whole point is that the text and the lattice are isomorphic . 
C:  They  represent each other  completely . 
C:  So that  
C:  I mean th 
C:  Yeah , but that 's gonna be the trouble no matter what . 
C:  Right ? 
C:  No matter what format you choose , you 're gonna have the trou you 're gonna have the difficulty of relating the  the frame - level features  
C:  Yep . 
C:  Right . 
C:  Transfer . 
C:  The , uh  
C:  One of the things that ATLAS is doing is they 're trying to define an API which is independent of the back store , 
C:  so that , uh , you could define a single API and the  the storage could be flat XML files or a database . 
C:  My opinion on that is for the s sort of stuff that we 're doing ,  I suspect it 's overkill to do a full relational database , that , um , just a flat file and , uh , search tools I bet will be enough . 
C:  But that 's the advantage of ATLAS , is that if we actually take  decide to go that route completely and we program to their API , then if we wanted to add a database later it would be pretty easy . 
C:  Yep . 
C:  I guess I 'm just a little hesitant to try to go whole hog on sort of the  the whole framework that  that NIST is talking about , with ATLAS and a database and all that sort of stuff , 
C:  cuz it 's a big learning curve , just to get going . 
C:  Whereas if we just do a flat file format , sure , it may not be as efficient 
C:  but everyone can program in Perl and  and use it . 
C:  Right ? 
C:  So , as opposed to  
C:  Well , if it 's not representing it , then how do you recover it ? 
C:  Of course it 's representing it . 
C:  That 's the whole point . 
C:  OK . 
C:  Well , that was a different point . 
C:  Right ? 
C:  So what I was saying is that  
C:  For Perl  if you want to just do Perl . 
C:  If you wanted to use the structured XML query language , that 's a different thing . 
C:  And it 's a set of tools <breath> that let you specify given the D - DDT  DTD of the document , um , what sorts of structural searches you want to do . 
C:  So you want to say that , you know , you 're looking for , um , a tag within a tag within a particular tag that has this particular text in it , um , and , uh , refers to a particular value . 
C:  And so the point isn't that an end - user , who is looking for a query like you specified , wouldn't program it in this language . 
C:  What you would do is , someone would build a tool that used that as a library . 
C:  So that they  so that you wouldn't have to construct the internal representations yourself . 
C:  Mm - hmm . 
C:  Right . 
C:  Right . 
C:  Yeah . 
C:  I think that there are quick and dirty solutions , 
C:  and then there are long - term , big - infrastructure solutions . 
C:  And so <inbreath> we want to try to pick something that lets us do a little bit of both . 
C:  Um  
C:  Right . 
C:  And so it seems to me that  
C:  I mean , I have to look at it again to see whether it can really do what we want , 
C:  but if we use the ATLAS external file representation , um , it seems like it 's rich enough that you could do quick tools just as I said in Perl , 
C:  and then later on if we choose to go up the learning curve , we can use the whole ATLAS inter infrastructure , 
C:  which has all that built in . 
C:  Sure . 
C:  Well , I wouldn't wait for the formats , because anything you pick we 'll be able to translate to another form . 
C:  Hi , Jane . 
C:  Can you  
C:  Oh , well . 
C:  Sure . 
C:  We 're about done . 
C:  Well , I think the other thing we might want to look at is alternatives to P - file . 
C:  I mean , th the reason I like P - file is I 'm already familiar with it , 
C:  we have expertise here , 
C:  and so if we pick something else , there 's the learning - curve problem . 
C:  But , I mean , it is just something we developed at ICSI . 
C:  And so  
C:  Yeah . 
C:  There 's an API for it . 
C:  And , uh , 
C:  a bunch of libraries , P - file utilities . 
C:  Well , that 's gonna be a problem no matter what . 
C:  You have the two - gigabyte limit on the filesystem size . 
C:  And we definitely hit that with Broadcast News . 
C:  Yep . 
C:  Most of the tools can handle that . 
C:  So that 
C:  we didn't do it at the API - level . 
C:  We did it at the t tool - level . 
C:  That  that  most  many of them can s you can specify several P - files 
C:  and they 'll just be done sequentially . 
C:  So . 
C:  Sure . 
C:  I mean , if you do " man P - file " or " apropos P - file " , you 'll see a lot . 
C:  I have no idea . 
C:  I didn't de I didn't develop it . 
C:  You know , it was  I think it was Dave Johnson . 
C:  So it 's all part of the Quicknet library . 
C:  It has all the utilities for it . 
C:  Oh , were they ? 
C:  Mm - hmm . 
C:  But there are ni they 're  
C:  The  Quicknet library has a bunch of things in it to handle P - files , 
C:  so it works pretty well . 
C:  Neither do I . 
C:  It 's a Phil file ? 
C:  Yeah , I 've been meaning to look at the ATLAS stuff again anyway . 
C:  So , just keep  
C:  Yeah , I think it  it w 
C:  And , w uh , as I said , I  what I did with this stuff  I based it on theirs . 
C:  It 's just they hadn't actually come up with an external format yet . 
C:  So now that they have come up with a format , it doesn't  it seems pretty reasonable to use it . 
C:  But let me look at it again . 
C:  As I said , that  
C:  There 's one level  there 's one more level of indirection 
C:  and I 'm just blanking on exactly how it works . 
C:  I gotta look at it again . 
C:  Yeah , I 've seen it . 
C:  Yep . 
C:  Easy  easy to map . 
C:  Mm - hmm . 
C:  Right . 
C:  Well , I mean , is that  
C:  I mean , it doesn't . 
C:  I mean , that  not for the topic of this meeting . 
C:  Should  should we mention some names on the people who are n ? 
C:  Yep . 
C:  I  I don't see any way that file formats are gonna help us with that . 
C:  It 's  it 's all a question of semantic . 
C:  Yeah . 
C:  Diff . 
C:  Yep . 
C:  Yep . 
C:  There 's actually a diff library you can use  to do things like that that  so you have different formats . 
C:  Yeah , I think it 's gonna be very hard . 
C:  Any sort of structured anything when you try to merge is really , really hard 
C:  because you ha i 
C:  The hard part isn't the file format . 
C:  The hard part is specifying what you mean by " merge " . 
C:  And that 's very difficult . 
C:  But this is exactly what I mean , is that  that the problem i 
C:  Yeah , 
C:  exactly . 
C:  The problem is saying " what are the semantics , 
C:  what do you mean by " merge " ? " 
C:  So . 
C:  And then you did diff . 
C:  Yeah , 
C:  that 's just what I thought . 
C:  That 's just wh how I would have done it . 
C:  Yep . 
C:  A textual  
C:  Yep . 
C:  Right . 
C:  But unfortunately they 've also hand - edited it . 
C:  Yep . 
C:  Well , 
C:  what if they haven't notated with them , times ? 
C:  So  so imagine  
C:  I think his  his example is a good one . 
C:  Imagine that this person who developed the corpus of the referring expressions didn't include time . 
C:  He included references to words . 
C:  He said that at this word is when  when it happened . 
C:  Or she . 
C:  Sure . 
C:  But what if  what if they change the words ? 
C:  Sure . 
C:  But they could have changed it a little . 
C:  The  the point is , that  that they may have annotated it off a word transcript that isn't the same as our word transcript , 
C:  so how do you merge it back in ? 
C:  I understand what you 're saying . 
C:  And I  I guess the answer is , um , it 's gonna be different every time . 
C:  It 's j it 's just gonna be  
C:  I it 's exactly what I said before , 
C:  which is that " what do you mean by " merge " ? " 
C:  So in this case where you have the words and you don't have the times , well , what do you mean by " merge " ? 
C:  If you tell me what you mean , I can write a program to do it . 
C:  Right . 
C:  And that 's about all you can do . 
C:  So  so in  so in this one you would have to do a best match between the word sequences , 
C:  extract the times f from the best match of theirs to yours , 
C:  and use that . 
C:  Right . 
C:  Right , 
C:  exactly . 
C:  So it could get very , very ugly . 
C:  Yeah . 
C:  More digits , the better . 
C:  OK , 
C:  this is 
C:  Oh , right . 
